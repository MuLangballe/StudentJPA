package com.example.studentjpa.controller;

import com.example.studentjpa.model.Student;
import com.example.studentjpa.repositories.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;
import java.util.Optional;

@RestController
public class StudentRestController {

    @Autowired
    StudentRepository studentRepository;

    @GetMapping ("/students")
    public List<Student> students(){
        List<Student> std = studentRepository.findAll();
        return std;
    }

    @GetMapping("/hello")
    public String hello(){
        return "Hello World";
    }

    @GetMapping("/hello/{sleep}")
    public String helloSleep(@PathVariable int sleep) throws InterruptedException {
        Thread.sleep(sleep);
        return "Hello World";
    }

    @GetMapping ("/addstudent")
    public List<Student> addStudent(){
        Student std = new Student();
        std.setBornDate(LocalDate.now());
        std.setBornTime(LocalTime.now());
        std.setName("hej");
        studentRepository.save(std);
        std.setName("Autogenerated id " + std.getId());
        studentRepository.save(std);
        return studentRepository.findAll();
    }

    @GetMapping ("/students/{name}")
    public List<Student> getallstudentsbyname(@PathVariable String name){
        return studentRepository.findAllByName(name);
    }

    @PostMapping("/student")
    @ResponseStatus(HttpStatus.CREATED)
    public Student postStudent(@RequestBody Student student){
        System.out.println(student);
        return studentRepository.save(student);
    }

    @PutMapping("/student")
    public ResponseEntity<Student> putStudent(@RequestBody Student student){
        Optional<Student> std = studentRepository.findById(student.getId());
        if (std.isPresent()){
            System.out.println(student);
            studentRepository.save(student);
            return new ResponseEntity<>(student, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(new Student(), HttpStatus.NOT_FOUND);
        }

    }

    @DeleteMapping("/student/{id}")
    public ResponseEntity<String> deleteStudent(@PathVariable int id){
        Optional<Student> orgStd = studentRepository.findById(id);
        if (orgStd.isPresent()){
            studentRepository.deleteById(id);
            return ResponseEntity.ok("Student deleted");
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Student not found");
        }
    }
}
